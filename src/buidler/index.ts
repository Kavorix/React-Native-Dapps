import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

import chalk from 'chalk';
import { ethers } from 'ethers';
import { flatten, unflatten } from 'flat';

import {
  createContext,
  createParams,
  createResult,
  CreationStatus,
  EnvVariable,
  EnvVariables,
  HardhatOptions,
} from '../types';

// eslint-disable-next-line @typescript-eslint/ban-types
const prettyStringify = (obj: object): string => JSON.stringify(obj, null, 2);

const injectFlattenedJsonToFile = (
  file: string,
  // eslint-disable-next-line @typescript-eslint/ban-types
  options: object,
  // eslint-disable-next-line @typescript-eslint/ban-types
  maybeUnflattened?: object
) => {
  !fs.existsSync(file) && fs.writeFileSync(file, JSON.stringify({}));
  fs.writeFileSync(
    file,
    prettyStringify({
      ...unflatten({
        ...(flatten(
          JSON.parse(fs.readFileSync(file, 'utf-8'))
          // eslint-disable-next-line @typescript-eslint/ban-types
        ) as object),
        ...options,
      }),
      ...(typeof maybeUnflattened === 'object' ? maybeUnflattened : {}),
    })
  );
};

const createBaseProject = ({ name }: createParams) =>
  execSync(`npx create-react-native-app ${name} -t with-typescript`, {
    stdio: 'inherit',
  });

const ejectExpoProject = (ctx: createContext) => {
  const {
    bundleIdentifier, packageName, uriScheme,
  } = ctx;
  const { projectDir } = ctx;

  // TODO: Icon can go here.

  injectFlattenedJsonToFile(path.resolve(projectDir, 'app.json'), {
    'expo.ios.bundleIdentifier': bundleIdentifier,
    'expo.android.package': packageName,
    'expo.scheme': uriScheme,
  });
  return execSync(`cd ${projectDir}; expo eject --non-interactive;`, {
    stdio: 'inherit',
  });
};

// TODO: Configure the application icon in Expo.
const setAppIcon = () => null;

// TODO: Add jest and show a working demonstration of solc.
const createTests = () => null;

const createFileThunk = (root: string) => (f: readonly string[]): string => {
  return path.resolve(root, ...f);
};

const hardhatOptions = async (
  projectFile: (f: readonly string[]) => string,
  scriptFile: (f: readonly string[]) => string
): Promise<HardhatOptions> => {
  const hardhatAccounts = await Promise.all(
    [...Array(10)].map(async () => {
      const { privateKey } = await ethers.Wallet.createRandom();
      return { privateKey, balance: '1000000000000000000000' }; // 1000 ETH
    })
  );
  return {
    hardhat: scriptFile(['hardhat.ts']),
    hardhatConfig: projectFile(['hardhat.config.js']),
    hardhatAccounts,
  } as HardhatOptions;
};

const createBaseContext = async (
  params: createParams
): Promise<createContext> => {
  const { name } = params;
  const projectDir = path.resolve(name);
  const scriptsDir = path.resolve(projectDir, 'scripts');
  const testsDir = path.resolve(projectDir, '__tests__');
  const projectFile = createFileThunk(projectDir);
  const scriptFile = createFileThunk(scriptsDir);
  const srcDir = path.resolve(projectDir, 'src');
  return Object.freeze({
    ...params,
    yarn: fs.existsSync(projectFile(['yarn.lock'])),
    hardhat: await hardhatOptions(projectFile, scriptFile),
    projectDir,
    scriptsDir,
    testsDir,
    srcDir,
  });
};

// TODO: Find a nice version.
const shimProcessVersion = 'v9.40';

const injectShims = (ctx: createContext) => {
  const { projectDir } = ctx;
  fs.writeFileSync(
    path.resolve(projectDir, 'index.js'),
    `
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */

// This file has been auto-generated by Ξ create-react-native-dapp Ξ.
// Feel free to modify it, but please take care to maintain the exact
// procedure listed between /* dapp-begin */ and /* dapp-end */, as 
// this will help persist a known template for future migrations.

/* dapp-begin */
const {Platform, LogBox} = require('react-native');

if (Platform.OS !== 'web') {
  require('react-native-get-random-values');
  LogBox.ignoreLogs(
    [
      "Warning: The provided value 'ms-stream' is not a valid 'responseType'.",
      "Warning: The provided value 'moz-chunked-arraybuffer' is not a valid 'responseType'.",
    ],
  );
}

if (typeof Buffer === 'undefined') {
  global.Buffer = require('buffer').Buffer;
}

global.btoa = global.btoa || require('base-64').encode;
global.atob = global.atob || require('base-64').decode;

process.version = '${shimProcessVersion}';

import { registerRootComponent } from 'expo';
const { default: App } = require('./src/App');

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in the Expo client or in a native build,
// the environment is set up appropriately
registerRootComponent(App);
/* dapp-end */
    `.trim()
  );
};

const createHardhatScripts = (ctx: createContext) => {
  const {
    hardhat: { hardhat },
  } = ctx;

  fs.writeFileSync(
    hardhat,
    `
import 'dotenv/config';
import * as child_process from 'child_process';

child_process.execSync('npx hardhat compile', { stdio: 'inherit' });
child_process.execSync('npx hardhat node', { stdio: 'inherit' });
    `.trim()
  );
};

const createScripts = (ctx: createContext) => {
  const { scriptsDir } = ctx;
  !fs.existsSync(scriptsDir) && fs.mkdirSync(scriptsDir);
  const postinstall = path.resolve(scriptsDir, 'postinstall.ts');
  fs.writeFileSync(
    postinstall,
    `
import 'dotenv/config';
import * as child_process from 'child_process';

child_process.execSync('npx pod-install', { stdio: 'inherit' });
    `.trim()
  );
  createHardhatScripts(ctx);
};

const getAllEnvVariables = (ctx: createContext): EnvVariables => {
  const { hardhat: { hardhatAccounts } } = ctx;
  return [
    ['HARDHAT_URL', 'string', 'http://localhost:8545'],
    ['HARDHAT_PRIVATE_KEY', 'string', hardhatAccounts[0].privateKey],
  ];
};

const shouldPrepareTypeRoots = (ctx: createContext) => {
  const stringsToRender = getAllEnvVariables(ctx).map(
    ([name, type]: EnvVariable) => `   export const ${name}: ${type};`
  );
  return fs.writeFileSync(
    path.resolve(ctx.projectDir, 'index.d.ts'),
    `
declare module '@env' {
${stringsToRender.join('\n')}
}
    `.trim()
  );
};

const shouldPrepareSpelling = (ctx: createContext) => fs.writeFileSync(
  path.resolve(ctx.projectDir, '.cspell.json'),
  prettyStringify({
    words: ["bytecode", "dapp"],
  }),
);

const shouldPrepareTsc = (ctx: createContext) => {
  fs.writeFileSync(
    path.resolve(ctx.projectDir, 'tsconfig.json'),
    prettyStringify({
      compilerOptions: {
        allowSyntheticDefaultImports: true,
        jsx: 'react-native',
        lib: ['dom', 'esnext'],
        moduleResolution: 'node',
        noEmit: true,
        skipLibCheck: true,
        resolveJsonModule: true,
        typeRoots: ['index.d.ts'],
        types: ['node'],
      },
      include: ['**/*.ts', '**/*.tsx'],
      exclude: [
        'node_modules',
        'babel.config.js',
        'metro.config.js',
        'jest.config.js',
      ],
    })
  );
};

const preparePackage = (ctx: createContext) =>
  injectFlattenedJsonToFile(
    path.resolve(ctx.projectDir, 'package.json'),
    {
      license: 'MIT',
      author: 'Alex Thomas (@cawfree) <hello@cawfree.com>',
      keywords: [
        'react',
        'react-native',
        'dapp',
        'ethereum',
        'web3',
        'starter',
        'react-native-web',
      ],
      // scripts
      'scripts.postinstall': 'npx ts-node scripts/postinstall',
      'scripts.hardhat': 'npx ts-node scripts/hardhat',
      'scripts.test': 'npx hardhat test',
      // husky
      'husky.hooks.pre-commit': 'lint-staged',
      // dependencies
      'dependencies.base-64': '1.0.0',
      'dependencies.buffer': '6.0.3',
      'dependencies.web3': '1.3.1',
      'dependencies.node-libs-browser': '2.2.1',
      'dependencies.path-browserify': '0.0.0',
      'dependencies.react-native-stream': '0.1.9',
      'dependencies.react-native-crypto': '2.2.0',
      'dependencies.react-native-get-random-values': '1.5.0',
      'dependencies.react-native-dotenv': '2.4.3',
      // devDependencies
      'devDependencies.dotenv': '8.2.0',
      'devDependencies.prettier': '2.2.1',
      'devDependencies.husky': '4.3.8',
      'devDependencies.@typescript-eslint/eslint-plugin': '^4.0.1',
      'devDependencies.@typescript-eslint/parser': '^4.0.1',
      'devDependencies.eslint': '^7.8.0',
      'devDependencies.eslint-config-prettier': '^6.11.0',
      'devDependencies.eslint-plugin-eslint-comments': '^3.2.0',
      'devDependencies.eslint-plugin-functional': '^3.0.2',
      'devDependencies.eslint-plugin-import': '^2.22.0',
      'devDependencies.lint-staged': '10.5.3',
      'devDependencies.@types/node': '14.14.22',
      'devDependencies.hardhat': '2.0.6',
      'devDependencies.@nomiclabs/hardhat-ethers': '^2.0.1',
      'devDependencies.@nomiclabs/hardhat-waffle': '^2.0.1',
      'devDependencies.chai': '^4.2.0',
      'devDependencies.ethereum-waffle': '^3.2.1',
      // react-native
      'react-native.stream': 'react-native-stream',
      'react-native.crypto': 'react-native-crypto',
      'react-native.path': 'path-browserify',
      'react-native.process': 'node-libs-browser/mock/process',
    },
    {
      'lint-staged': {
        '*.{ts,tsx,js,jsx}': "eslint --ext '.ts,.tsx,.js,.jsx' -c .eslintrc.json",
      },
    }
  );

const shouldPrepareMetro = (ctx: createContext) =>
  fs.writeFileSync(
    path.resolve(ctx.projectDir, 'metro.config.js'),
    `
const extraNodeModules = require('node-libs-browser');

module.exports = {
  resolver: {
    extraNodeModules,
  },
  transformer: {
    assetPlugins: ['expo-asset/tools/hashAssetFiles'],
  },
};
    `.trim()
  );

const shouldPrepareBabel = (ctx: createContext) =>
  fs.writeFileSync(
    path.resolve(ctx.projectDir, 'babel.config.js'),
    `
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      ['module:react-native-dotenv'],
    ],
  };
};
    `.trim()
  );

const shouldPrepareEslint = (ctx: createContext) =>
  fs.writeFileSync(
    path.resolve(ctx.projectDir, '.eslintrc.json'),
    prettyStringify({
      root: true,
      parser: '@typescript-eslint/parser',
      env: { es6: true },
      ignorePatterns: [
        'node_modules',
        'build',
        'coverage',
        'babel.config.js',
        'metro.config.js',
        'hardhat.config.js',
        '__tests__/contracts',
      ],
      plugins: ['import', 'eslint-comments', 'functional'],
      extends: [
        'eslint:recommended',
        'plugin:eslint-comments/recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:import/typescript',
        'plugin:functional/lite',
        'prettier',
        'prettier/@typescript-eslint',
      ],
      globals: {
        //BigInt: true,
        console: true,
        __DEV__: true,
      },
      rules: {
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        'eslint-comments/disable-enable-pair': [
          'error',
          { allowWholeFile: true },
        ],
        'eslint-comments/no-unused-disable': 'error',
        'import/order': [
          'error',
          { 'newlines-between': 'always', alphabetize: { order: 'asc' } },
        ],
        'sort-imports': [
          'error',
          { ignoreDeclarationSort: true, ignoreCase: true },
        ],
      },
    })
  );

const shouldWriteEnv = (ctx: createContext) => {
  const lines = getAllEnvVariables(ctx).map(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([name, _type, value]) => `${name}=${value}`
  );
  const env = path.resolve(ctx.projectDir, '.env');
  const example = path.resolve(ctx.projectDir, '.env.example');
  fs.writeFileSync(env, `${lines.join('\n')}\n`);
  fs.copyFileSync(env, example);
};

const shouldInstall = (ctx: createContext) =>
  execSync(
    `cd ${ctx.projectDir}; ${
      ctx.yarn ? 'yarn' : 'npm i'
    }; `.trim(),
    {
      stdio: 'inherit',
    }
  );

const getExampleContract = () =>
  `
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Hello {
  string defaultSuffix;
  constructor() {
    defaultSuffix = '!';
  }
  function sayHello(string memory name) public view returns(string memory) {
    return string(abi.encodePacked("Welcome to ", name, defaultSuffix));
  }
}
`.trim();

const shouldPrepareHardhatExample = (ctx: createContext) => {
  const {
    projectDir,
    testsDir,
    srcDir,
    hardhat: {
     hardhatConfig,
     hardhatAccounts,
    },
  } = ctx;

  const contracts = path.resolve(projectDir, 'contracts');

  !fs.existsSync(contracts) && fs.mkdirSync(contracts);
  !fs.existsSync(testsDir) && fs.mkdirSync(testsDir);

  const contractsTestDir = path.resolve(testsDir, 'contracts');
  const frontendTestDir = path.resolve(testsDir, 'frontend');

  fs.mkdirSync(contractsTestDir);
  fs.mkdirSync(frontendTestDir);

  fs.writeFileSync(path.resolve(contractsTestDir, '.gitkeep'), '');
  fs.writeFileSync(path.resolve(frontendTestDir, '.gitkeep'), '');

  const contractTest = path.resolve(contractsTestDir, 'Hello.test.js');

  fs.writeFileSync(
    contractTest,
    `
const { expect } = require('chai');

describe("Hello", function() {
  it("Should return the default greeting", async function() {
    const Hello = await ethers.getContractFactory("Hello");
    const hello = await Hello.deploy();
    
    await hello.deployed();

    expect(await hello.sayHello("React Native")).to.equal("Welcome to React Native!");
    expect(await hello.sayHello("Web3")).to.equal("Welcome to Web3!");
  });
});
    `
  );

  const contract = path.resolve(contracts, 'Hello.sol');
  fs.writeFileSync(contract, getExampleContract());

  fs.writeFileSync(
    hardhatConfig,
    `
/**
 * @type import('hardhat/config').HardhatUserConfig
 */
require("@nomiclabs/hardhat-waffle");

module.exports = {
  solidity: "0.7.3",
  networks: {
    hardhat: {
      accounts: ${JSON.stringify(hardhatAccounts)}
    },
  },
  paths: {
    sources: './contracts',
    tests: './__tests__/contracts',
    cache: './cache',
    artifacts: './artifacts',
  },
};
    `.trim()
  );

  !fs.existsSync(srcDir) && fs.mkdirSync(srcDir);

  fs.writeFileSync(
    path.resolve(srcDir, 'App.tsx'),
    `
import { HARDHAT_PRIVATE_KEY, HARDHAT_URL } from '@env';
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import Web3 from 'web3';

import Hello from '../artifacts/contracts/Hello.sol/Hello.json';

const styles = StyleSheet.create({
  center: { alignItems: 'center', justifyContent: 'center' },
});

const shouldDeployContract = async (web3, abi, data, from: string) => {
  const deployment = new web3.eth.Contract(abi).deploy({ data });
  const gas = await deployment.estimateGas();
  const {
    options: { address: contractAddress },
  } = await deployment.send({ from, gas });
  return new web3.eth.Contract(abi, contractAddress);
};

export default function App(): JSX.Element {
  const [message, setMessage] = React.useState<string>('');
  const web3 = React.useMemo(
    () => new Web3(new Web3.providers.HttpProvider(HARDHAT_URL)),
    [HARDHAT_URL]
  );
  React.useEffect(() => {
    (async () => {
      const { address } = await web3.eth.accounts.privateKeyToAccount(HARDHAT_PRIVATE_KEY);
      const contract = await shouldDeployContract(
        web3,
        Hello.abi,
        Hello.bytecode,
        address
      );
      setMessage(await contract.methods.sayHello('React Native').call());
    })();
  }, [web3, shouldDeployContract, setMessage, HARDHAT_PRIVATE_KEY]);
  return (
    <View style={[StyleSheet.absoluteFill, styles.center]}>
      <Text>{message}</Text>
    </View>
  );
}
    `.trim()
  );

  const orig = path.resolve(projectDir, 'App.tsx');
  fs.existsSync(orig) && fs.unlinkSync(orig);

  fs.writeFileSync(path.resolve(projectDir, 'README.md'), `

# 👋 Welcome!
Thank you so much for using [\`create-react-native-dapp\`](https://github.com/cawfree/create-react-native-dapp)! We wish you the best of luck on your decentralized adventure 🦄.

## 🔗 Links
  - Raise issues on our [**Issues Page**](https://github.com/cawfree/create-react-native-dapp/issues).
  - Make feature requests via [**Discord**](https://discord.com/invite/PeqrwpCDwc).
  - Find out the latest on my [**Twitter**](https://twitter.com/cawfree).

## 🙏 Donations
If this project has helped you, please consider making a small contribution towards maintenance of this library:
[**cawfree.eth**](https://etherscan.io/address/0x312e71162df834a87a2684d30562b94816b0f072).

  `.trim());

};

const shouldPrepareExample = (ctx: createContext) => {
  return shouldPrepareHardhatExample(ctx);
};

const getHardhatGitIgnore = (): string | null => {
  return `
# Hardhat
artifacts/
cache/
  `.trim();
};

const shouldPrepareGitignore = (ctx: createContext) => {
  const { projectDir } = ctx;
  const lines = [getHardhatGitIgnore()].filter((e) => !!e) as readonly string[];
  const gitignore = path.resolve(projectDir, '.gitignore');
  fs.writeFileSync(
    gitignore,
    `
${fs.readFileSync(gitignore, 'utf-8')}
# Environment Variables (Store safe defaults in .env.example!)
.env

${lines.join('\n\n')}

  `.trim()
  );
};

const getScriptCommandString = (ctx: createContext, str: string) =>
  chalk.white.bold`${ctx.yarn ? 'yarn' : 'npm run-script'} ${str}`;

export const getSuccessMessagePrefix = (ctx: createContext): string | null => {
  return `
Before starting, you must initialize the simulated blockchain by executing:
- ${getScriptCommandString(ctx, 'hardhat')}
  `.trim();
};

export const getSuccessMessageSuffix = (ctx: createContext): string | null => {
  return `
To recompile your contracts you can execute:
${chalk.white.bold`npx hardhat compile`}

You can also test your contracts using:
${getScriptCommandString(ctx, 'test')}
  `;
};

export const getSuccessMessage = (ctx: createContext): string => {
  const pfx = getSuccessMessagePrefix(ctx);
  const sfx = getSuccessMessageSuffix(ctx);
  return `
${chalk.green`✔`} Successfully integrated Web3 into React Native!
${
  pfx
    ? ` 
${pfx}`
    : ''
}

To compile and run your project in development, execute one of the following commands:
- ${getScriptCommandString(ctx, `ios`)}
- ${getScriptCommandString(ctx, `android`)}
- ${getScriptCommandString(ctx, `web`)}
${
  sfx
    ? `
${sfx}`
    : ''
}

  `.trim();
};

export const create = async (params: createParams): Promise<createResult> => {
  createBaseProject(params);

  const ctx = await createBaseContext(params);

  if (!fs.existsSync(ctx.projectDir)) {
    return Object.freeze({
      ...ctx,
      status: CreationStatus.FAILURE,
      message: `Failed to resolve project directory.`,
    });
  }

  setAppIcon();
  ejectExpoProject(ctx);
  injectShims(ctx);
  createScripts(ctx);
  // TODO: generate some client side tests
  createTests();
  preparePackage(ctx);
  shouldPrepareMetro(ctx);
  shouldPrepareBabel(ctx);
  shouldPrepareEslint(ctx);
  shouldPrepareTypeRoots(ctx);
  shouldPrepareSpelling(ctx);
  shouldPrepareTsc(ctx);
  shouldPrepareGitignore(ctx);
  shouldWriteEnv(ctx);
  shouldInstall(ctx);
  shouldPrepareExample(ctx);

  return Object.freeze({
    ...ctx,
    status: CreationStatus.SUCCESS,
    message: getSuccessMessage(ctx),
  });
};
