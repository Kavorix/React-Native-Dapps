import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

import { flatten, unflatten } from 'flat';

import {
  createContext,
  createParams,
  createResult,
  CreationStatus,
} from '../types';

const createBaseProject = (name: string) =>
  execSync(`npx create-react-native-app ${name} -t with-typescript`, {
    stdio: 'inherit',
  });

const ejectExpoProject = (ctx: createContext) =>
  execSync(`cd ${ctx.dir}; expo eject;`, { stdio: 'inherit' });

// TODO: Configure the application icon in Expo.
const setAppIcon = () => null;

// TODO: Add jest and show a working demonstration of solc.
const createTests = () => null;

const createBaseContext = (name: string): createContext => {
  const dir = path.resolve(name);
  const scripts = path.resolve(dir, 'scripts');
  const postinstall = path.resolve(scripts, 'postinstall.js');
  const ganache = path.resolve(scripts, 'ganache.js');
  const pkg = path.resolve(dir, 'package.json');
  const shouldUseYarn = fs.existsSync(path.resolve(dir, 'yarn.lock'));
  const metroConfig = path.resolve(dir, 'metro.config.js');
  const app = path.resolve(dir, 'App.tsx');
  return Object.freeze({
    dir,
    index: path.resolve(dir, 'index.js'),
    scripts,
    postinstall,
    ganache,
    pkg,
    metroConfig,
    app,
    shouldUseYarn,
  });
};

// TODO: Find a nice version.
const shimProcessVersion = 'v9.40';

const injectShims = (ctx: createContext) =>
  fs.writeFileSync(
    ctx.index,
    `
// This file has been auto-generated by Ξ create-react-native-dapp Ξ.
// Feel free to modify it, but please take care to maintain the exact
// procedure listed between /* dapp-begin */ and /* dapp-end */, as 
// this will help persist a known template for future migrations.

/* dapp-begin */
const {Platform} = require('react-native');

if (Platform.OS !== 'web') {
  require('react-native-get-random-values');
}

if (typeof Buffer === 'undefined') {
  global.Buffer = require('buffer').Buffer;
}

global.btoa = global.btoa || require('base-64').encode;
global.atob = global.atob || require('base-64').decode;

process.version = '${shimProcessVersion}';

import { registerRootComponent } from 'expo';
const { default: App } = require('./App');
/* dapp-end */

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in the Expo client or in a native build,
// the environment is set up appropriately
registerRootComponent(App);
    
    `.trim()
  );

const createScripts = (ctx: createContext) => {
  fs.mkdirSync(ctx.scripts);
  fs.writeFileSync(
    ctx.postinstall,
    `
const {execSync} = require('child_process');
execSync('npx pod-install', {stdio: 'inherit'});
    `.trim()
  );
  fs.writeFileSync(
    ctx.ganache,
    `
const {execSync} = require('child_process');
execSync('node node_modules/.bin/ganache-cli', {stdio: 'inherit'});
    `.trim()
  );
};

const preparePackage = (ctx: createContext) =>
  fs.writeFileSync(
    ctx.pkg,
    JSON.stringify(
      unflatten({
        // eslint-disable-next-line @typescript-eslint/ban-types
        ...(flatten(JSON.parse(fs.readFileSync(ctx.pkg, 'utf-8'))) as object),
        // scripts
        'scripts.postinstall': 'node scripts/postinstall',
        'scripts.ganache': 'node scripts/ganache',
        // dependencies
        'dependencies.base-64': '1.0.0',
        'dependencies.buffer': '6.0.3',
        'dependencies.web3': '1.3.1',
        'dependencies.node-libs-browser': '2.2.1',
        'dependencies.path-browserify': '0.0.0',
        'dependencies.react-native-stream': '0.1.9',
        'dependencies.react-native-crypto': '2.2.0',
        'dependencies.react-native-get-random-values': '1.5.0',
        // devDependencies
        'devDependencies.ganache-cli': '6.12.1',
        // react-native
        'react-native.stream': 'react-native-stream',
        'react-native.crypto': 'react-native-crypto',
        'react-native.path': 'path-browserify',
        'react-native.process': 'node-libs-browser/mock/process',
      }),
      null,
      2
    )
  );

const shouldPrepareMetro = (ctx: createContext) =>
  fs.writeFileSync(
    ctx.metroConfig,
    `
const extraNodeModules = require('node-libs-browser');

module.exports = {
  resolver: {
    extraNodeModules,
  },
  transformer: {
    assetPlugins: ['expo-asset/tools/hashAssetFiles'],
  },
};
    `.trim()
  );

const shouldInstall = (ctx: createContext) =>
  execSync(`cd ${ctx.dir}; ${ctx.shouldUseYarn ? 'yarn' : 'npm i'}; `.trim(), {
    stdio: 'inherit',
  });

const shouldInitWeb3Environment = (ctx: createContext) =>
  execSync(`cd ${ctx.dir}; npx truffle init;`, { stdio: 'inherit' });

const shouldPrepareExample = (ctx: createContext) =>
  fs.writeFileSync(
    ctx.app,
    `
import React from 'react';
import { Text, View, StyleSheet } from 'react-native';
import Web3 from 'web3';

const styles = StyleSheet.create({
  center: {alignItems: 'center', justifyContent: 'center'},
});

export default function App(): JSX.Element {
  React.useEffect(() => {
    (async () => {
      const ganache = 'http://127.0.0.1:8545';
      const web3 = new Web3(new Web3.providers.HttpProvider(ganache));
      const latestBlock = await web3.eth.getBlock('latest');
      const wallet = await web3.eth.accounts.create();
      console.warn({ latestBlock });
      console.warn({ wallet });
    })();
  }, []);
  return (
    <View style={[StyleSheet.absoluteFill, styles.center]}>
      <Text>Welcome to Web3!</Text>
    </View>
  );
}
    `.trim()
  );

export const create = async (params: createParams): Promise<createResult> => {
  const { name } = params;

  createBaseProject(name);

  const ctx = createBaseContext(name);

  if (!fs.existsSync(ctx.dir)) {
    return Object.freeze({
      ...ctx,
      status: CreationStatus.FAILURE,
      message: `Failed to resolve project directory.`,
    });
  }

  setAppIcon();
  ejectExpoProject(ctx);
  injectShims(ctx);
  createScripts(ctx);
  createTests();
  preparePackage(ctx);
  shouldPrepareMetro(ctx);
  shouldInitWeb3Environment(ctx);

  shouldInstall(ctx);
  shouldPrepareExample(ctx);

  return Object.freeze({
    ...ctx,
    status: CreationStatus.SUCCESS,
    message: 'Successfully initialized dapp.',
  });
};
